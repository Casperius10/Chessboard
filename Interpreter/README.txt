Interpreter.py:
Board.cpp, loaded into the Arduino controlling the physical chessboard, generates raw 0-63 coordinates and castling marks (100,1000). interpreter.py takes this data and converts it into PGN format, which can be copy/pasted into any chess engine. Note that the script relies on players to understand all the rules of chess; it does not check for legal/illegal moves, and any illegal moves will still be interpreted normally, but online chess engines will only accept the PGN up to the mistake and reject all subsequent content. Users may also notice that the PGN moves generated by the interpreter are longer than normal--this is intended to account for cases where multiple pieces of the same type are able to move to the same space, where chess engines would specify which piece was used (e.g. Rhg1). Chess engines will still read this long-form format normally. It should also be noted that at this time all promotions automatically convert to Queen, but because the program doesn't consider legal/illegal moves, you can just edit the promotion move (g8=Q -> g8=N) in the PGN file before loading it into the engine. 

Usage:
Board.cpp writes raw coordinate files to an SD card with randomly-generated file names. To load these files to the interpreter, replace the sample directory at the top of main() with the complete path to the file. You may also need to edit the board[] array if your game is set up different from the default, such as in an odds game (make sure your analysis engine is also set up for the same conditions when you paste in the PGN). Additionally, each PGN file is headed with customizeable details about the game. 